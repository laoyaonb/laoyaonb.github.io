<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>lyn&#39;s blog</title>
    <link>http://mylyn.cn/</link>
    
    <atom:link href="http://mylyn.cn/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 07 Nov 2023 03:24:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>C语言复习之 基础知识汇总</title>
      <link>http://mylyn.cn/2023/11/01/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</link>
      <guid>http://mylyn.cn/2023/11/01/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</guid>
      <pubDate>Wed, 01 Nov 2023 11:02:32 GMT</pubDate>
      
      <description>&lt;p&gt;有许多学科，明明是理科，但需要记忆的内容却不少。这样的学科往往令人头疼。&lt;br&gt;而C语言这类的编程语言正是这样。不过相较于物理学习的物理学史，编程语言的需要记忆的内容多为基础知识。也就是说，这些需要记忆的东西正是为后面的深入学习做准备。因此C语言中的基础知识是非常有必要记忆和理解的。&lt;/p&gt;
&lt;h1 id=&quot;编程-计算机通识&quot;&gt;&lt;a href=&quot;#编程-计算机通识&quot; class=&quot;headerlink&quot; title=&quot;编程&amp;#x2F;计算机通识&quot;&gt;&lt;/a&gt;编程&amp;#x2F;计算机通识&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>有许多学科，明明是理科，但需要记忆的内容却不少。这样的学科往往令人头疼。<br>而C语言这类的编程语言正是这样。不过相较于物理学习的物理学史，编程语言的需要记忆的内容多为基础知识。也就是说，这些需要记忆的东西正是为后面的深入学习做准备。因此C语言中的基础知识是非常有必要记忆和理解的。</p><h1 id="编程-计算机通识"><a href="#编程-计算机通识" class="headerlink" title="编程&#x2F;计算机通识"></a>编程&#x2F;计算机通识</h1><span id="more"></span><p>一般通识就是考教材上的内容</p><h2 id="算法的概念"><a href="#算法的概念" class="headerlink" title="算法的概念"></a>算法的概念</h2><p>计算机科学家 Wirth 提出著名公式<strong>“数据结构＋算法＝程序”</strong><br>是提前设计好的通过有限步得出结果的一种解决问题的方式（算法是解题方法的精确描述）  </p><h2 id="算法的特点"><a href="#算法的特点" class="headerlink" title="算法的特点"></a>算法的特点</h2><p>(1)有穷性：步骤应有限，否则不会输出结果<br>(2)确定性：算法的每一个步骤应是确定的<br>(3)<strong>有多个或零个输入</strong>（重要）<br>(4)<strong>有一个或多个输出</strong>（重要）<br>(5)有效性：每个步骤都能被有效执行</p><h2 id="算法的描述"><a href="#算法的描述" class="headerlink" title="算法的描述"></a>算法的描述</h2><h3 id="一、自然语言"><a href="#一、自然语言" class="headerlink" title="一、自然语言"></a>一、自然语言</h3><p>通俗易懂，适合求解简单的问题  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">题目：设有两个整数 A 和 B，要求将它们互换</span><br><span class="line">第一步：定义一个新的变量 C，将 A 的值赋给 C;</span><br><span class="line">第二步：把 B 的值赋给 A;</span><br><span class="line">第三步：把 C 的值赋给 B;</span><br><span class="line">以上程序可以简写为</span><br><span class="line">S1: C &lt;-- A;</span><br><span class="line">S2: A &lt;-- B;</span><br><span class="line">S3: B &lt;-- C.</span><br></pre></td></tr></table></figure><h3 id="二、流程图"><a href="#二、流程图" class="headerlink" title="二、流程图"></a>二、流程图</h3><p>直观、易懂<br><img src="/./images/%E6%B5%81%E7%A8%8B%E5%9B%BE.webp" alt="流程图"></p><h3 id="三、计算机语言"><a href="#三、计算机语言" class="headerlink" title="三、计算机语言"></a>三、计算机语言</h3><p>机器语言<br>汇编语言<br><strong>高级语言</strong>（C语言属于这个，其他两类语言做了解即可）</p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>日常生活使用 <strong>十进制(d&#x2F;D)</strong>, 计算机内部使用 <strong>二进制(b&#x2F;B)</strong>, 人类管理计算机内部的二进制时使用 <strong>十六进制(h&#x2F;H)</strong> 。因此这三种进制是所有进制里最重要的，相互转化是一定要掌握的。</p><h3 id="十进制转二进制（转-k-进制）"><a href="#十进制转二进制（转-k-进制）" class="headerlink" title="十进制转二进制（转 k 进制）"></a>十进制转二进制（转 k 进制）</h3><p>考试的重难点，属于没学过就非常花时间的那种题。（小学现在都开始学二进制的四则运算了，作为大学牲还不会十转二，这合理吗）  </p><h4 id="基本方法：倒取余数法（短除法）"><a href="#基本方法：倒取余数法（短除法）" class="headerlink" title="基本方法：倒取余数法（短除法）"></a>基本方法：<strong>倒取余数法（短除法）</strong></h4><p><img src="/./images/%E5%80%92%E5%8F%96%E4%BD%99%E6%95%B0%E6%B3%95.jpg" alt="倒取余数法"><br>这幅图非常直观，效率也非常高，求解过程中没有思维上的障碍，只要想通为什么能够用这样的方法来计算二进制，就不会忘记这种方法了。转 k 进制只需将除数‘2’换成‘k’就可以了。这同时也是编程中常用的方法。  </p><h4 id="进阶方法：背表（非正式名称）"><a href="#进阶方法：背表（非正式名称）" class="headerlink" title="进阶方法：背表（非正式名称）"></a>进阶方法：<strong>背表（非正式名称）</strong></h4><p>例如：将十进制 29 转化而二进制  </p><ol><li>十进制29介于16与32之间，而我们知道16的二进制是10000,32的二进制是100000，所以结果有五位，第一位是</li><li>29减去16后，继续求剩下的四位。13介于8和16之间，所以介于1000和10000之间，推断出第二位是1  </li><li>剩下的5其实是常用的，可以直接看成101了  </li><li>得出结果 29d &#x3D; 11101b<br>这种方法熟练后比倒取余数法快，本质上是一种迭代或递归的处理思想，将大问题转化为小问题。<br>有些场景下会计算的很快，例如 127d &#x3D; 1111111b 这是因为 128d &#x3D; 10000000b，所以给128的二进制数减去1就能快速得到127的二进制数。<br>同理其实29也可以快速计算：29 &#x3D; 31 - 2； 29d &#x3D; 11111b - 10b &#x3D; 11101b；<br>合理的综合使用方法能够显著地提升计算的速度。</li></ol><h3 id="二进制（k-进制）转十进制"><a href="#二进制（k-进制）转十进制" class="headerlink" title="二进制（k 进制）转十进制"></a>二进制（k 进制）转十进制</h3><p>相比之下，二进制转十进制就容易很多。<br>十进制数 123 本质上也和其他进制一样 1×10^2 + 2×10^1 + 3×10^0 &#x3D; 123d<br>在进制中 像例子中的1 2 3称为<strong>基数</strong>， 10^2 10^1 10^0 称为<strong>位权</strong><br>同理，二进制转十进制的计算方法是一样的<br>例如 11101b &#x3D; 1×2^4 + 1×2^3 + 1×2^2 + 0×2^1 + 1×2^0 &#x3D; 29d<br>k进制同理，不举例。  </p><h3 id="二进制-与-十六进制相互转化"><a href="#二进制-与-十六进制相互转化" class="headerlink" title="二进制 与 十六进制相互转化"></a>二进制 与 十六进制相互转化</h3><p>这是一种特殊的进制转换，因为 16 是 2 的四次方，所以一位十六进制数可以用四位二进制数来完全表示。  </p><h4 id="二转十六"><a href="#二转十六" class="headerlink" title="二转十六"></a>二转十六</h4><p>例如 1110101b<br>1.补齐位数：将二进制数补成 4 的倍数位 01110101b<br>2.转化：0111 是 十六进制里的 7， 0101 是十六进制里的 5；<br>3.拼接：1110101b &#x3D; 75h<br>再来一个例子 101110b<br>1.补齐位数：00101110b<br>2.转化：0010b &#x3D; 2h , 1110b &#x3D; Eh; ( E 是十六进制中的 14 )<br>3.拼接：101110b &#x3D; 2Eh  </p><h4 id="十六转二"><a href="#十六转二" class="headerlink" title="十六转二"></a>十六转二</h4><p>例如 46</p><ol><li>转化(不足四位补齐)：4h &#x3D; 0100b; 6h &#x3D; 0110b;  </li><li>拼接(开头的 0 去掉)：46h &#x3D; 1000110b</li></ol><p>附上二进制对应十六进制表(不要求背)<br><img src="/./images/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6.jpg" alt="十六进制"></p><hr><h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h1><h2 id="基础认识"><a href="#基础认识" class="headerlink" title="基础认识"></a>基础认识</h2><h3 id="程序结构有三种"><a href="#程序结构有三种" class="headerlink" title="程序结构有三种"></a>程序结构有三种</h3><p>顺序结构：从上往下执行，以<strong>分号</strong>为间隔，一句一句执行。<br>选择结构(分支结构)：主要是以 if { } else { }语句实现，特殊情况可以使用Switch语句来<strong>简化代码</strong>。<br>循环结构：以 for 循环和 while 循环来实现。</p><p>理论上，学会这三种程序结构，就可以设计一切的程序了。复杂的功能都是由这三种结构设计出来的，程序设计课程也是为了能熟练运用这三种结构来设计算法解决问题。  </p><h3 id="程序基本结构"><a href="#程序基本结构" class="headerlink" title="程序基本结构"></a>程序基本结构</h3><p>下面是最基础的一段代码:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Hello, world! \n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们从这段最基础的代码中分析一下 C 语言程序的基本框架：  </p><h4 id="一·编译过程"><a href="#一·编译过程" class="headerlink" title="一·编译过程"></a>一·编译过程</h4><p>先介绍一下代码所在的文件名，不妨叫做 demo.c 好了，其中 .c 是文件的后缀名，表示是 C 语言的<strong>源文件</strong>，若要运行 C 语言的程序，需要经过两个步骤：1.<strong>编译</strong>( .c –&gt; .obj ) 2.<strong>链接</strong>( .obj –&gt; .exe )这两步都成功后，程序才能正常运行。<br>同时，也只有 demo.exe 文件才可以运行，demo.c 和 demo.obj 都<strong>无法运行</strong>。  </p><h4 id="二·代码解释"><a href="#二·代码解释" class="headerlink" title="二·代码解释"></a>二·代码解释</h4><p><code>#include &lt;stdio.h&gt;</code><br>第一行是<strong>编译预处理</strong>，名词看不懂没关系，可以理解成在<strong>编译</strong>这一过程中，将 <strong>stdio.h</strong> 这个文件里面的内容放在了这一行里面。  </p><p>stdio: standard input output 标准输入输出<br>.h: header file <strong>头文件</strong>的后缀名<br>在第四行使用的 printf 函数包含在头文件 stdio.h 中，因此要将这个头文件 include 进来。<br><em><strong>这一行不用加分号！！！</strong></em><br><code>int main() &#123;...&#125;</code><br>第三行开始的代码为<strong>需要执行</strong>的代码，也是运行时<strong>开始执行</strong>的代码(没错，是从第三行开始运行的，第一行是编译的过程中需要读取的内容)<br>C 语言的程序是从以函数 main() 为<strong>入口</strong>，主函数中的 return 0 为<strong>出口</strong>的(如果有return的话)。<br><code>printf(&quot;Hello, world! \n&quot;);</code>这一行是 printf 的语法，在此不做解释。  </p><p><code>return 0;</code><br>这一行可以看成是语法要求的，用于<strong>结束主函数的运行</strong>，并且返回一个**整数 0 **。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2>]]></content:encoded>
      
      
      <category domain="http://mylyn.cn/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      <category domain="http://mylyn.cn/tags/c%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/">c语言复习</category>
      
      
      <comments>http://mylyn.cn/2023/11/01/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>http://mylyn.cn/2023/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <guid>http://mylyn.cn/2023/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <pubDate>Mon, 30 Oct 2023 13:42:05 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;p&gt;标题有1~6级，分别用 # 到 ###### 表示&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>标题有1~6级，分别用 # 到 ###### 表示</p><span id="more"></span><hr><p><em>斜体</em>             <em>斜体</em></p><p><strong>粗体</strong></p><p><em><strong>加粗斜体</strong></em></p><p><del>删除线</del></p><blockquote><p>文字引用</p></blockquote><p>这是      <code>//行内代码</code></p><p>这是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//多行代码</span><br><span class="line">//多行代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$$<br>y &#x3D; x + 1<br>$$</p><h2 id="下面有三条分割线"><a href="#下面有三条分割线" class="headerlink" title="下面有三条分割线"></a>下面有三条分割线</h2><p>+++</p><hr>]]></content:encoded>
      
      
      
      <category domain="http://mylyn.cn/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%EF%BC%8C%E8%BF%87%E5%87%A0%E5%A4%A9%E4%BC%9A%E5%88%A0%E6%8E%89%E7%9A%84/">测试用，过几天会删掉的~</category>
      
      
      <comments>http://mylyn.cn/2023/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://mylyn.cn/2023/10/29/hello-world/</link>
      <guid>http://mylyn.cn/2023/10/29/hello-world/</guid>
      <pubDate>Sun, 29 Oct 2023 06:59:29 GMT</pubDate>
      
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://mylyn.cn/2023/10/29/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
