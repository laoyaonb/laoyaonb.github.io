<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>lyn&#39;s blog</title>
    <link>http://mylyn.cn/</link>
    
    <atom:link href="http://mylyn.cn/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 22 Jun 2024 08:23:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>test</title>
      <link>http://mylyn.cn/2024/06/22/test/</link>
      <guid>http://mylyn.cn/2024/06/22/test/</guid>
      <pubDate>Sat, 22 Jun 2024 07:45:34 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;这是一个测试&quot;&gt;这是一个测试&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="这是一个测试">这是一个测试</h1><span id="more"></span><h2 id="这是一个积分">这是一个积分</h2><p><span class="math inline">\(\int_{0}^{+\infty}\)</span></p><h2 id="这是一个矩阵">这是一个矩阵</h2><p><span class="math display">\[\left(\begin{matrix}   1 &amp; 2 &amp; 3 \\   4 &amp; 5 &amp; 6 \\   7 &amp; 8 &amp; 9  \end{matrix}  \right)\]</span></p><h2 id="这是一个行列式">这是一个行列式</h2><p><span class="math display">\[\left[\begin{matrix}   1 &amp; 2 &amp; 3 \\   4 &amp; 5 &amp; 6 \\   7 &amp; 8 &amp; 9  \end{matrix}  \right]\]</span> ## 这是各种符号 <span class="math display">\[\alpha\beta\gamma\delta\epsilon\zeta\eta\theta\iota\kappa\lambda\mu\nu\xi\omicron\pi\rho\sigma\tau\upsilon\phi\chi\psi\omega\]</span></p><h2 id="没有了">没有了</h2><p>hexo三部曲提交</p><p>hexo clean</p><p>hexo g</p><p>hexo d</p><p>hexo s可以部署到本地先查看</p>]]></content:encoded>
      
      
      <category domain="http://mylyn.cn/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/">数学建模</category>
      
      
      <category domain="http://mylyn.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/">数学建模</category>
      
      
      <comments>http://mylyn.cn/2024/06/22/test/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C语言复习(二)之 常用标准库函数</title>
      <link>http://mylyn.cn/2023/12/07/%E6%A0%87%E9%A2%98/</link>
      <guid>http://mylyn.cn/2023/12/07/%E6%A0%87%E9%A2%98/</guid>
      <pubDate>Thu, 07 Dec 2023 04:50:17 GMT</pubDate>
      
      <description>&lt;p&gt;鉴于用户方便使用，C语言自带了许多标准库，库中有非常多的常用或者难以直接编写的函数（比如
printf()
），而这些标准库的函数能够让我们的程序编写更方便，代码更简洁明了，也便于维护。&lt;/p&gt;
&lt;p&gt;因此我们需要学习这些函数，使日后的学习更加方便和规范。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>鉴于用户方便使用，C语言自带了许多标准库，库中有非常多的常用或者难以直接编写的函数（比如printf()），而这些标准库的函数能够让我们的程序编写更方便，代码更简洁明了，也便于维护。</p><p>因此我们需要学习这些函数，使日后的学习更加方便和规范。</p><span id="more"></span><h1 id="函数从哪里来">函数从哪里来</h1><p>在我们的代码第一行，一般都是以<br /><code>#include &lt;stdio.h&gt;</code> 开头的。</p><p>这一行的作用在上一章中提到过，是<strong>引入头文件</strong>的语句，将stdio.h 这个头文件引入进来。而 printf、scanf这类基本的输入输出的函数就书写在这个头文件中。</p><h1 id="stdio.h">stdio.h</h1><p>stdio: standard input output 标准输入输出 .h: header 头文件后缀名</p><p>顾名思义，这个头文件中有常用的<strong>输入、输出</strong>函数。</p><p>下面将按照<strong>使用频率</strong>来介绍该库中的函数</p><h2 id="格式化输出函数-printf">格式化输出函数( printf )</h2><h3 id="基础">基础</h3><p>函数：<code>int printf(char* format, 表达式列表)</code><br />功能：例如 <code>printf("%d", 666);</code>将会在控制台输出 666这个整型</p><p>使用方法：<br />printf() 是<strong>一定要有括号的</strong>(一般的函数都需要括号)<br />括号里的第一个参数必须为字符串，<strong>不可缺省</strong>。<br />例如：<code>printf("Hello, world! ");</code><br />但是只有像上一行这种输出方式的话，如果想输出<strong>变量</strong>或者<strong>计算结果</strong>的话，是实现不了的。</p><p>因此，printf()这个函数给了一种一般性的写法，需要用到** %d %f %c<strong>这样的</strong>格式符**<br /><code>printf("%d %d %d", x, y, z);</code><br />若 x 的值是 1，若 y 的值是 2，若 z 的值是 3<br />那么就会输出 1 2 3<br />因为 %d 与 %d 存在空格，所以输出的时候也会有空格。<br />这就相当于使用 %d在字符串中<strong>占了一个整型的位置</strong>，等待后面的<strong>参数</strong>传递进来。<br />值得注意的是，传递参数是按照字符串内的顺序传递的。x 会传到第一个 %d中，y 会传到第二个 %d 中，以此类推。</p><h3 id="字符输出">字符输出</h3>]]></content:encoded>
      
      
      <category domain="http://mylyn.cn/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      <category domain="http://mylyn.cn/tags/c%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/">c语言复习</category>
      
      
      <comments>http://mylyn.cn/2023/12/07/%E6%A0%87%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C语言复习(一)之 基础知识汇总</title>
      <link>http://mylyn.cn/2023/11/01/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</link>
      <guid>http://mylyn.cn/2023/11/01/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</guid>
      <pubDate>Wed, 01 Nov 2023 11:02:32 GMT</pubDate>
      
      <description>&lt;p&gt;有许多学科，明明是理科，但需要记忆的内容却不少。这样的学科往往令人头疼。&lt;br /&gt;
而C语言这类的编程语言正是这样。不过相较于物理学习的物理学史，编程语言的需要记忆的内容多为基础知识。也就是说，这些需要记忆的东西正是为后面的深入学习做准备。因此C语言中的基础知识是非常有必要记忆和理解的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>有许多学科，明明是理科，但需要记忆的内容却不少。这样的学科往往令人头疼。<br />而C语言这类的编程语言正是这样。不过相较于物理学习的物理学史，编程语言的需要记忆的内容多为基础知识。也就是说，这些需要记忆的东西正是为后面的深入学习做准备。因此C语言中的基础知识是非常有必要记忆和理解的。</p><span id="more"></span><h1 id="编程计算机通识">编程/计算机通识</h1><p>一般通识就是考教材上的内容</p><h2 id="算法的概念">算法的概念</h2><p>计算机科学家 Wirth提出著名公式<strong>“数据结构＋算法＝程序”</strong><br />是提前设计好的通过有限步得出结果的一种解决问题的方式（算法是解题方法的精确描述）<br />## 算法的特点 (1)有穷性：步骤应有限，否则不会输出结果<br />(2)确定性：算法的每一个步骤应是确定的<br />(3)<strong>有多个或零个输入</strong>（重要）<br />(4)<strong>有一个或多个输出</strong>（重要）<br />(5)有效性：每个步骤都能被有效执行 ## 算法的描述</p><h3 id="一自然语言">一、自然语言</h3><p>通俗易懂，适合求解简单的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">题目：设有两个整数 A 和 B，要求将它们互换</span><br><span class="line">第一步：定义一个新的变量 C，将 A 的值赋给 C;</span><br><span class="line">第二步：把 B 的值赋给 A;</span><br><span class="line">第三步：把 C 的值赋给 B;</span><br><span class="line">以上程序可以简写为</span><br><span class="line">S1: C &lt;-- A;</span><br><span class="line">S2: A &lt;-- B;</span><br><span class="line">S3: B &lt;-- C.</span><br></pre></td></tr></table></figure><h3 id="二流程图">二、流程图</h3><p>直观、易懂<br /><img src="./images/流程图.webp" alt="流程图" /> ### 三、计算机语言机器语言<br />汇编语言<br /><strong>高级语言</strong>（C语言属于这个，其他两类语言做了解即可）</p><h2 id="进制转换">进制转换</h2><p>日常生活使用 <strong>十进制(d/D)</strong>, 计算机内部使用<strong>二进制(b/B)</strong>, 人类管理计算机内部的二进制时使用<strong>十六进制(h/H)</strong>。因此这三种进制是所有进制里最重要的，相互转化是一定要掌握的。</p><p><strong><em>注：C语言只有八、十、十六进制，没有二进制，但是所有进制都要转换为二进制处理。</em></strong>### 十进制转二进制（转 k 进制）考试的重难点，属于没学过就非常花时间的那种题。（小学现在都开始学二进制的四则运算了，作为大学牲还不会十转二，这合理吗）<br />#### 基本方法：<strong>倒取余数法（短除法）</strong><br /><img src="./images/倒取余数法.jpg" alt="倒取余数法" />这幅图非常直观，效率也非常高，求解过程中没有思维上的障碍，只要想通为什么能够用这样的方法来计算二进制，就不会忘记这种方法了。转k 进制只需将除数‘2’换成‘k’就可以了。这同时也是编程中常用的方法。<br />#### 进阶方法：<strong>背表（非正式名称）</strong><br />例如：将十进制 29 转化而二进制<br />1.十进制29介于16与32之间，而我们知道16的二进制是10000,32的二进制是100000，所以结果有五位，第一位是2.29减去16后，继续求剩下的四位。13介于8和16之间，所以介于1000和10000之间，推断出第二位是1<br />3. 剩下的5其实是常用的，可以直接看成101了<br />4. 得出结果 29d = 11101b<br />这种方法熟练后比倒取余数法快，本质上是一种迭代或递归的处理思想，将大问题转化为小问题。<br />有些场景下会计算的很快，例如 127d = 1111111b 这是因为 128d =10000000b，所以给128的二进制数减去1就能快速得到127的二进制数。<br />同理其实29也可以快速计算：29 = 31 - 2； 29d = 11111b - 10b =11101b；<br />合理的综合使用方法能够显著地提升计算的速度。<br />### 二进制（k 进制）转十进制 相比之下，二进制转十进制就容易很多。<br />十进制数 123 本质上也和其他进制一样 1×10^2 + 2×10^1 + 3×10^0 =123d<br />在进制中 像例子中的1 2 3称为<strong>基数</strong>， 10^2 10^1 10^0称为<strong>位权</strong><br />同理，二进制转十进制的计算方法是一样的<br />例如 11101b = 1×2^4 + 1×2^3 + 1×2^2 + 0×2^1 + 1×2^0 = 29d<br />k进制同理，不举例。</p><h3 id="二进制-与-十六进制相互转化">二进制 与 十六进制相互转化</h3><p>这是一种特殊的进制转换，因为 16 是 2的四次方，所以一位十六进制数可以用四位二进制数来完全表示。<br />#### 二转十六 例如 1110101b<br />1.补齐位数：将二进制数补成 4 的倍数位 01110101b<br />2.转化：0111 是 十六进制里的 7， 0101 是十六进制里的 5；<br />3.拼接：1110101b = 75h<br />再来一个例子 101110b<br />1.补齐位数：00101110b<br />2.转化：0010b = 2h , 1110b = Eh; ( E 是十六进制中的 14 )<br />3.拼接：101110b = 2Eh<br />#### 十六转二 例如 46 1. 转化(不足四位补齐)：4h = 0100b; 6h =0110b;<br />2. 拼接(开头的 0 去掉)：46h = 1000110b</p><p>附上二进制对应十六进制表(不要求背) <img src="./images/十六进制.jpg"alt="十六进制" /></p><hr /><h1 id="c语言基础">C语言基础</h1><h2 id="基础认识">基础认识</h2><h3 id="程序结构有三种">程序结构有三种</h3><p>顺序结构：从上往下执行，以<strong>分号</strong>为间隔，一句一句执行。<br />选择结构(分支结构)：主要是以 if { } else {}语句实现，特殊情况可以使用Switch语句来<strong>简化代码</strong>。<br />循环结构：以 for 循环和 while 循环来实现。</p><p>理论上，学会这三种程序结构，就可以设计一切的程序了。复杂的功能都是由这三种结构设计出来的，程序设计课程也是为了能熟练运用这三种结构来设计算法解决问题。</p><h3 id="程序基本结构">程序基本结构</h3><p>下面是最基础的一段代码:<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Hello, world! \n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 下面我们从这段最基础的代码中分析一下 C语言程序的基本框架：<br />#### 一·编译过程 先介绍一下代码所在的文件名，不妨叫做 demo.c 好了，其中.c 是文件的后缀名，表示是 C 语言的<strong>源文件</strong>，若要运行 C语言的程序，需要经过两个步骤：1.<strong>编译</strong>( .c --&gt; .obj )2.<strong>链接</strong>( .obj --&gt; .exe)这两步都成功后，程序才能正常运行。<br />同时，也只有 demo.exe 文件才可以运行，demo.c 和 demo.obj都<strong>无法运行</strong>。<br />#### 二·代码解释 <code>#include &lt;stdio.h&gt;</code><br />第一行是<strong>编译预处理</strong>，名词看不懂没关系，可以理解成在<strong>编译</strong>这一过程中，将<strong>stdio.h</strong> 这个文件里面的内容放在了这一行里面。</p><p>stdio: standard input output 标准输入输出<br />.h: header file <strong>头文件</strong>的后缀名<br />在第四行使用的 printf 函数包含在头文件 stdio.h 中，因此要将这个头文件include 进来。<br /><strong><em>include 这一行不用加分号！！！</em></strong></p><p><code>int main() &#123;...&#125;</code><br />第三行开始的代码为<strong>需要执行</strong>的代码，也是运行时<strong>开始执行</strong>的代码(没错，是从第三行开始运行的，第一行是编译的过程中需要读取的内容)<br />C 语言的程序是从以函数 main() 为<strong>入口</strong>，主函数中的 return0 为<strong>出口</strong>的(如果有return的话)。<br /><code>printf("Hello, world! \n");</code><br />这一行是 printf 的语法，在此不做解释。</p><p><code>return 0;</code><br />这一行可以看成是语法要求的，用于<strong>结束主函数的运行</strong>，并且返回给编译器一个<strong>整数0 </strong>。</p><h2 id="标识符">标识符</h2><h3 id="标识符的命名规则">标识符的命名规则</h3><ol type="1"><li>必须由<strong><em>字母、数字、下划线</em></strong>组成，不能有其他的符号。<br /></li><li>并且第一个必须为<strong><em>字母</em></strong>或<strong><em>下划线</em></strong>，不能以数字开头。<br /></li><li>且不能使用<strong><em>关键字</em></strong>进行命名。</li></ol><p>区分大小写，sum 和 Sum 是两个毫不相关的标识符。<br />### 标识符的分类 关键字：不可以作为<strong>用户标识符</strong>。例如 intdouble auto if while 等等，但是 While可以作为用户标识符，因为大小写区分。<br />预定义标识符：C语言中<strong>系统预先定义</strong>的标识符，比如 printfdefine include 等等，<strong>这些都可以作为用户标识符</strong>。<br />用户标识符：用户根据需要自己定义的标识符称为用户标识符。无论如何自定义标识符，都必须符合标识符的三条命名规则。</p><h2 id="基本数据类型">基本数据类型</h2><figure><img src="./images/数据类型.png" alt="数据类型" /><figcaption aria-hidden="true">数据类型</figcaption></figure><h3 id="整型">整型</h3><p>这一块将按照数据类型的长度（即所占内存大小）来介绍整型数据类型</p><p>char (unsigned char): 字符常量(无符号char)，8位，1字节<br />short (unsigned short): 短整型，16位，2字节<br />int (unsigned int): 整型，一般32位，4字节<br />long (unsigned long): 长整型，32位，4字节（没错，int和long的存储空间是一样的）<br />long long (unsigned long long): 长长整型，64位，8字节</p><p>表示范围：-2^(位-1) ~ 2^(位-1)-1 （无符号 0 ~ 2^位-1）</p><h3 id="浮点型">浮点型</h3><p>只有两个数据类型</p><p>float: 单精度浮点型，32位，4字节 double:双精度浮点数，64位，8字节</p><h3 id="字符类型">字符类型</h3><p>char:在整型出现过，char储存方式为整型，但是一般字符用char来表示，后期的字符串也是用char来作为基本元素</p><h3 id="常量">常量</h3><p>const: 在定义变量时, 如果决定不改变其值,可在数据类型前加上const以达到目的。</p><p>如： <code>const int x = 4;</code> 这样就保证了 x 的值为 4且不再改变。</p><h3 id="指针类型">指针类型</h3><p>以后会涉及，位数与电脑位数相同，用 long long存储，一般以十六进制表示。</p><h3 id="空类型">空类型</h3><p>void: 通常用于函数地返回值类型，写 void 的话就可以不用 return语句</p><p>（2023.11.21 完）</p>]]></content:encoded>
      
      
      <category domain="http://mylyn.cn/categories/C%E8%AF%AD%E8%A8%80/">C语言</category>
      
      
      <category domain="http://mylyn.cn/tags/c%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/">c语言复习</category>
      
      
      <comments>http://mylyn.cn/2023/11/01/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E4%B9%8B%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>http://mylyn.cn/2023/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <guid>http://mylyn.cn/2023/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <pubDate>Mon, 30 Oct 2023 13:42:05 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;一级标题&quot;&gt;一级标题&lt;/h1&gt;
&lt;h2 id=&quot;二级标题&quot;&gt;二级标题&lt;/h2&gt;
&lt;p&gt;标题有1~6级，分别用 # 到 ###### 表示&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><p>标题有1~6级，分别用 # 到 ###### 表示</p><span id="more"></span><hr /><p><em>斜体</em> <em>斜体</em></p><p><strong>粗体</strong></p><p><strong><em>加粗斜体</em></strong></p><p><del>删除线</del></p><blockquote><p>文字引用</p></blockquote><p>这是 <code>//行内代码</code></p><p>这是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//多行代码</span><br><span class="line">//多行代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><span class="math display">\[y = x + 1\]</span></p><h2 id="下面有三条分割线">下面有三条分割线</h2><p>+++ ***</p>]]></content:encoded>
      
      
      
      <category domain="http://mylyn.cn/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%EF%BC%8C%E8%BF%87%E5%87%A0%E5%A4%A9%E4%BC%9A%E5%88%A0%E6%8E%89%E7%9A%84/">测试用，过几天会删掉的~</category>
      
      
      <comments>http://mylyn.cn/2023/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://mylyn.cn/2023/10/29/hello-world/</link>
      <guid>http://mylyn.cn/2023/10/29/hello-world/</guid>
      <pubDate>Sun, 29 Oct 2023 06:59:29 GMT</pubDate>
      
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very
first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
more info. If you get any problems when using Hexo, you can find the
answer in &lt;a
href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or
you can ask me on &lt;a
href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://mylyn.cn/2023/10/29/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
